import hashlib
import time

# Block class that represents each block in the blockchain
class Block:
    def __init__(self, index, previous_hash, transactions):
        self.index = index
        self.timestamp = time.time()  # Current timestamp
        self.transactions = transactions
        self.previous_hash = previous_hash
        self.hash = self.calculate_hash()  # Hash of the current block

    def calculate_hash(self):
        # Concatenate block data to create a unique string
        block_data = f"{self.index}{self.timestamp}{self.transactions}{self.previous_hash}"
        return hashlib.sha256(block_data.encode('utf-8')).hexdigest()

# Blockchain class that manages the chain of blocks
class Blockchain:
    def __init__(self):
        # Create the first block (genesis block) with no previous block
        self.chain = [self.create_genesis_block()]

    def create_genesis_block(self):
        # The first block has no previous hash
        return Block(0, "0", ["Genesis Block"])

    def add_block(self, transactions):
        # Get the last block in the chain
        last_block = self.chain[-1]
        # Create a new block with the previous block's hash and the new transactions
        new_block = Block(last_block.index + 1, last_block.hash, transactions)
        self.chain.append(new_block)

    def validate_chain(self):
        # Check if the hash of each block matches the expected hash
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]

            # Validate that the current block's hash is correctly calculated
            if current_block.hash != current_block.calculate_hash():
                print(f"Block {current_block.index} has been tampered with!")
                return False

            # Validate that the current block's previous hash matches the previous block's hash
            if current_block.previous_hash != previous_block.hash:
                print(f"Block {current_block.index} has an invalid previous hash!")
                return False

        # If all blocks are valid
        print("Blockchain is valid.")
        return True

    def display_chain(self):
        # Display the details of each block in the blockchain
        for block in self.chain:
            print(f"Block #{block.index} - Hash: {block.hash}")
            print(f"Timestamp: {block.timestamp}")
            print(f"Transactions: {block.transactions}")
            print(f"Previous Hash: {block.previous_hash}")
            print("="*50)

# Optional Proof of Work mechanism
def proof_of_work(block, difficulty=4):
    # Difficulty determines how many leading zeros are required in the hash
    target = "0" * difficulty
    while block.hash[:difficulty] != target:
        block.timestamp = time.time()  # Update timestamp for each attempt
        block.hash = block.calculate_hash()  # Recalculate hash
    print(f"Block mined: {block.hash}")
    return block

# Test the blockchain
if __name__ == "__main__":
    # Create a blockchain instance
    blockchain = Blockchain()

    # Add blocks with dummy transactions
    blockchain.add_block(["Alice pays Bob 5 BTC", "Bob pays Charlie 3 BTC"])
    blockchain.add_block(["Charlie pays Dave 1 BTC", "Alice pays Eve 2 BTC"])

    # Display the current blockchain
    blockchain.display_chain()

    # Validate the blockchain
    blockchain.validate_chain()

    # Try to tamper with the data and validate again
    blockchain.chain[1].transactions = ["Alice pays Bob 10 BTC"]  # Tampering data
    blockchain.validate_chain()  # This should detect the tampering
